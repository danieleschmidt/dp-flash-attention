name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        test-type: ["unit", "integration"]
        
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"
        
    - name: Run linting
      if: matrix.test-type == 'unit' && matrix.python-version == '3.10'
      run: |
        ruff check src/ tests/
        black --check src/ tests/
        mypy src/
        
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/unit/ -v --cov=dp_flash_attention --cov-report=xml
        
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/integration/ -v
        
    - name: Upload coverage
      if: matrix.test-type == 'unit' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  privacy-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"
        
    - name: Run privacy tests
      run: |
        pytest tests/privacy/ -v --tb=short
        
    - name: Validate privacy guarantees
      run: |
        python -c "
        from dp_flash_attention.privacy import RenyiAccountant
        accountant = RenyiAccountant()
        # Validate theoretical guarantees
        assert accountant.validate_composition_bounds()
        print('âœ… Privacy guarantees validated')
        "

  gpu-tests:
    runs-on: [self-hosted, gpu]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'gpu-tests')
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install CUDA dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev,cuda]"
        
    - name: Verify CUDA setup
      run: |
        python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
        python -c "import torch; print(f'CUDA devices: {torch.cuda.device_count()}')"
        
    - name: Run GPU tests
      run: |
        pytest tests/ -m gpu -v --tb=short
        
    - name: Run performance benchmarks
      run: |
        pytest tests/benchmarks/ -v --benchmark-only --benchmark-json=benchmark-results.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install security tools
      run: |
        pip install bandit safety pip-audit
        
    - name: Run security analysis
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        pip-audit --format=json --output=pip-audit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: "*-report.json"

  build-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/